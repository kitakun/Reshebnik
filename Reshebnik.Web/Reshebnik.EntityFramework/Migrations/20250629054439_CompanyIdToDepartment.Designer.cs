// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reshebnik.EntityFramework;

#nullable disable

namespace Reshebnik.EntityFramework.Migrations
{
    [DbContext(typeof(ReshebnikContext))]
    [Migration("20250629054439_CompanyIdToDepartment")]
    partial class CompanyIdToDepartment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("companies_id_seq");

            modelBuilder.HasSequence<int>("employee_id_seq");

            modelBuilder.Entity("Reshebnik.Domain.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"companies_id_seq\"')");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("integer")
                        .HasColumnName("employees_count");

                    b.Property<string>("Industry")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("industry");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<bool>("NotifyAboutLoweringMetrics")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_about_lowering_metrics");

                    b.Property<string>("Phone")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("phone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsFundamental")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fundamental");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.DepartmentSchemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AncestorDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("ancestor_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.Property<int>("FundamentalDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("fundamental_id");

                    b.HasKey("Id");

                    b.HasIndex("AncestorDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FundamentalDepartmentId", "DepartmentId", "AncestorDepartmentId");

                    b.ToTable("department_scheme", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.EmployeeDepartmentLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("DepartmentId", "EmployeeId");

                    b.ToTable("employee_department_links", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"employee_id_seq\"')");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("EmailInvitationCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email_invitation_code");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fio");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("job_title");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Email");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.SystemNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreaetedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("character varying(200000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("system_notifications", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EmployeeId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.DepartmentSchemeEntity", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.DepartmentEntity", "AncestorDepartment")
                        .WithMany()
                        .HasForeignKey("AncestorDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Reshebnik.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("PartInSchemas")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshebnik.Domain.Entities.DepartmentEntity", "FundamentalDepartment")
                        .WithMany("OwnerSchemas")
                        .HasForeignKey("FundamentalDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AncestorDepartment");

                    b.Navigation("Department");

                    b.Navigation("FundamentalDepartment");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.EmployeeDepartmentLinkEntity", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("LinkEntities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshebnik.Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("DepartmentLinks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.SystemNotificationEntity", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("Reshebnik.Domain.Entities.EmployeeEntity", "User")
                        .WithMany("UserNotification")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reshebnik.Domain.Entities.SystemNotificationEntity", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("LinkEntities");

                    b.Navigation("OwnerSchemas");

                    b.Navigation("PartInSchemas");
                });

            modelBuilder.Entity("Reshebnik.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("DepartmentLinks");

                    b.Navigation("UserNotification");
                });
#pragma warning restore 612, 618
        }
    }
}
