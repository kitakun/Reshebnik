// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tabligo.EntityFramework;

#nullable disable

namespace Tabligo.EntityFramework.Migrations
{
    [DbContext(typeof(TabligoContext))]
    partial class TabligoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("companies_id_seq");

            modelBuilder.HasSequence<int>("employee_id_seq");

            modelBuilder.Entity("Tabligo.Domain.Entities.ArchivedMetricEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<int>("ArchivedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("archived_by_user_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_date");

                    b.Property<int?>("IndicatorId")
                        .HasColumnType("integer")
                        .HasColumnName("indicator_id");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_date");

                    b.Property<int?>("MetricId")
                        .HasColumnType("integer")
                        .HasColumnName("metric_id");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("metric_type");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedByUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MetricId")
                        .IsUnique();

                    b.ToTable("archived_metrics", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ArchivedUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<int>("ArchivedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("archived_by_user_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedByUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("archived_users", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.BugHuntEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LastRequestResponse")
                        .HasColumnType("text")
                        .HasColumnName("last_request_response");

                    b.Property<int?>("LastRequestStatus")
                        .HasColumnType("integer")
                        .HasColumnName("last_request_status");

                    b.Property<string>("LastRequestUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("last_request_url");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("message");

                    b.Property<string>("Screenshot")
                        .HasColumnType("text")
                        .HasColumnName("screenshot");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("bug_hunts", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.CategoryRecordEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Name")
                        .IsUnique();

                    b.ToTable("category_records", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"companies_id_seq\"')");

                    b.Property<bool>("AllowForEmployeesEditMetrics")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoUpdateByApi")
                        .HasColumnType("boolean");

                    b.Property<string>("DefaultMetrics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<int>("EmployeesCount")
                        .HasColumnType("integer")
                        .HasColumnName("employees_count");

                    b.Property<bool>("EnableNotificationsInApp")
                        .HasColumnType("boolean");

                    b.Property<string>("Industry")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("industry");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notification_type");

                    b.Property<bool>("NotifyAboutLoweringMetrics")
                        .HasColumnType("boolean")
                        .HasColumnName("notify_about_lowering_metrics");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("phone");

                    b.Property<bool>("ShowNewMetrics")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFundamental")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fundamental");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.DepartmentSchemeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AncestorDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("ancestor_id");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.Property<int>("FundamentalDepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("fundamental_id");

                    b.HasKey("Id");

                    b.HasIndex("AncestorDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FundamentalDepartmentId", "DepartmentId", "AncestorDepartmentId");

                    b.ToTable("department_scheme", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmailMessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EnqueuedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enqueued_at");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<string>("From")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("no-reply@mydoc.com")
                        .HasColumnName("from");

                    b.Property<bool>("IsHtml")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_html");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<int>("SentByCompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("SentByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("to");

                    b.HasKey("Id");

                    b.HasIndex("SentByCompanyId");

                    b.HasIndex("SentByUserId");

                    b.ToTable("email_messages", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmployeeDepartmentLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("DepartmentId", "EmployeeId");

                    b.ToTable("employee_department_links", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"employee_id_seq\"')");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultRole")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("default_role");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("EmailInvitationCode")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email_invitation_code");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fio");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("job_title");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<bool?>("WelcomeWasSeen")
                        .HasColumnType("boolean")
                        .HasColumnName("welcome_was_seen");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ExternalIdLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("external_id");

                    b.Property<int?>("IndicatorId")
                        .HasColumnType("integer")
                        .HasColumnName("indicator_id");

                    b.Property<int>("IntegrationType")
                        .HasColumnType("integer")
                        .HasColumnName("integration_type");

                    b.Property<int?>("MetricId")
                        .HasColumnType("integer")
                        .HasColumnName("metric_id");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("IndicatorId");

                    b.HasIndex("MetricId");

                    b.HasIndex("CompanyId", "EntityType", "EntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_id_links_entity");

                    b.HasIndex("CompanyId", "ExternalId", "IntegrationType", "EntityType")
                        .HasDatabaseName("ix_external_id_links_lookup");

                    b.ToTable("external_id_links", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.IndicatorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArchiveMetricId")
                        .HasColumnType("integer")
                        .HasColumnName("archive_metric_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("FillmentPeriod")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("fillment_period");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<decimal?>("Max")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("Min")
                        .HasColumnType("numeric")
                        .HasColumnName("min_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Plan")
                        .HasColumnType("numeric")
                        .HasColumnName("plan_value");

                    b.Property<decimal>("RejectionTreshold")
                        .HasColumnType("numeric")
                        .HasColumnName("rejection_treshold");

                    b.Property<bool>("ShowOnKeyIndicators")
                        .HasColumnType("boolean")
                        .HasColumnName("show_on_key_indicators");

                    b.Property<bool>("ShowOnMainScreen")
                        .HasColumnType("boolean")
                        .HasColumnName("show_on_main_screen");

                    b.Property<bool>("ShowToEmployees")
                        .HasColumnType("boolean")
                        .HasColumnName("show_to_employees");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("unit_type");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("value_type");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveMetricId")
                        .IsUnique();

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("indicators", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.IntegrationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Configuration")
                        .HasColumnType("jsonb")
                        .HasColumnName("configuration");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_activated");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "Type")
                        .IsUnique();

                    b.ToTable("integrations", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.JobOperationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<int>("Hash")
                        .HasColumnType("integer")
                        .HasColumnName("hash");

                    b.Property<JsonDocument>("InputData")
                        .HasColumnType("jsonb")
                        .HasColumnName("input_data");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("retry_count");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Hash");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.ToTable("job_operations", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.LogExceptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stacktrace");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_email");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("log_exceptions", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricDepartmentLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<int>("MetricId")
                        .HasColumnType("integer")
                        .HasColumnName("metric_id");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MetricId", "DepartmentId");

                    b.ToTable("metric_department_links", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricEmployeeLinkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<int>("MetricId")
                        .HasColumnType("integer")
                        .HasColumnName("metric_id");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MetricId", "EmployeeId");

                    b.ToTable("metric_employee_links", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClickHouseKey")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("clickhouse_key");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<decimal?>("Max")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("Min")
                        .HasColumnType("numeric")
                        .HasColumnName("min_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("period_type");

                    b.Property<decimal?>("Plan")
                        .HasColumnType("numeric")
                        .HasColumnName("plan_value");

                    b.Property<bool>("ShowGrowthPercent")
                        .HasColumnType("boolean")
                        .HasColumnName("show_growth_percent");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("unit");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.Property<int?>("WeekStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("week_start_date");

                    b.Property<string>("WeekType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("week_type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("metrics", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricTemplateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClickHouseKey")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("clickhouse_key");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Max")
                        .HasColumnType("numeric")
                        .HasColumnName("max_value");

                    b.Property<decimal?>("Min")
                        .HasColumnType("numeric")
                        .HasColumnName("min_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("period_type");

                    b.Property<decimal?>("Plan")
                        .HasColumnType("numeric")
                        .HasColumnName("plan_value");

                    b.Property<bool>("ShowGrowthPercent")
                        .HasColumnType("boolean")
                        .HasColumnName("show_growth_percent");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("type");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("unit");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.Property<int?>("WeekStartDate")
                        .HasColumnType("integer")
                        .HasColumnName("week_start_date");

                    b.Property<string>("WeekType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("week_type");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("metric_templates", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.SpecialInvitationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("company_description");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("company_name");

                    b.Property<int>("CompanySize")
                        .HasColumnType("integer")
                        .HasColumnName("company_size");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("fio");

                    b.Property<bool>("Granted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("granted");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("special_invitations", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.SystemNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreaetedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200000)
                        .HasColumnType("character varying(200000)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("system_notifications", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmployeeEntityId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EmployeeId", "NotificationId");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("NotificationId");

                    b.ToTable("user_notifications", (string)null);
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ArchivedMetricEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "ArchivedByUser")
                        .WithMany()
                        .HasForeignKey("ArchivedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("ArchivedMetrics")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.MetricEntity", "Metric")
                        .WithOne("ArchivedMetric")
                        .HasForeignKey("Tabligo.Domain.Entities.ArchivedMetricEntity", "MetricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchivedByUser");

                    b.Navigation("Company");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ArchivedUserEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "ArchivedByUser")
                        .WithMany()
                        .HasForeignKey("ArchivedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", null)
                        .WithMany("ArchivedUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "Employee")
                        .WithOne("ArchivedUser")
                        .HasForeignKey("Tabligo.Domain.Entities.ArchivedUserEntity", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArchivedByUser");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.CategoryRecordEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.DepartmentSchemeEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "AncestorDepartment")
                        .WithMany()
                        .HasForeignKey("AncestorDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("PartInSchemas")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "FundamentalDepartment")
                        .WithMany("OwnerSchemas")
                        .HasForeignKey("FundamentalDepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AncestorDepartment");

                    b.Navigation("Department");

                    b.Navigation("FundamentalDepartment");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmailMessageEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "SentByCompany")
                        .WithMany()
                        .HasForeignKey("SentByCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "SentByUser")
                        .WithMany()
                        .HasForeignKey("SentByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("Tabligo.Domain.Entities.EmailAttachment", "Attachments", b1 =>
                        {
                            b1.Property<int>("EmailMessageId")
                                .HasColumnType("integer");

                            b1.Property<string>("FileName")
                                .HasColumnType("text");

                            b1.Property<byte[]>("Content")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("text")
                                .HasDefaultValue("application/octet-stream");

                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.HasKey("EmailMessageId", "FileName");

                            b1.ToTable("EmailAttachments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EmailMessageId");
                        });

                    b.Navigation("Attachments");

                    b.Navigation("SentByCompany");

                    b.Navigation("SentByUser");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmployeeDepartmentLinkEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("LinkEntities")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("DepartmentLinks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ExternalIdLinkEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("ExternalIdLinks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("ExternalIdLinks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("ExternalIdLinks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.IndicatorEntity", "Indicator")
                        .WithMany("ExternalIdLinks")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.MetricEntity", "Metric")
                        .WithMany("ExternalIdLinks")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Indicator");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.IndicatorEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.ArchivedMetricEntity", "ArchivedMetric")
                        .WithOne("Indicator")
                        .HasForeignKey("Tabligo.Domain.Entities.IndicatorEntity", "ArchiveMetricId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "CreatedByCompany")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArchivedMetric");

                    b.Navigation("CreatedByCompany");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.IntegrationEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Integrations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.JobOperationEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.LogExceptionEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricDepartmentLinkEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.DepartmentEntity", "Department")
                        .WithMany("MetricLinks")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.MetricEntity", "Metric")
                        .WithMany("DepartmentLinks")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricEmployeeLinkEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "Employee")
                        .WithMany("MetricLinks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.MetricEntity", "Metric")
                        .WithMany("EmployeeLinks")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany("Metrics")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricTemplateEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.SystemNotificationEntity", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", null)
                        .WithMany("UserNotification")
                        .HasForeignKey("EmployeeEntityId");

                    b.HasOne("Tabligo.Domain.Entities.EmployeeEntity", "User")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tabligo.Domain.Entities.SystemNotificationEntity", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.ArchivedMetricEntity", b =>
                {
                    b.Navigation("Indicator");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.CompanyEntity", b =>
                {
                    b.Navigation("ArchivedMetrics");

                    b.Navigation("ArchivedUsers");

                    b.Navigation("Departments");

                    b.Navigation("Employees");

                    b.Navigation("ExternalIdLinks");

                    b.Navigation("Integrations");

                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.DepartmentEntity", b =>
                {
                    b.Navigation("ExternalIdLinks");

                    b.Navigation("LinkEntities");

                    b.Navigation("MetricLinks");

                    b.Navigation("OwnerSchemas");

                    b.Navigation("PartInSchemas");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("ArchivedUser");

                    b.Navigation("DepartmentLinks");

                    b.Navigation("ExternalIdLinks");

                    b.Navigation("MetricLinks");

                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.IndicatorEntity", b =>
                {
                    b.Navigation("ExternalIdLinks");
                });

            modelBuilder.Entity("Tabligo.Domain.Entities.MetricEntity", b =>
                {
                    b.Navigation("ArchivedMetric");

                    b.Navigation("DepartmentLinks");

                    b.Navigation("EmployeeLinks");

                    b.Navigation("ExternalIdLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
